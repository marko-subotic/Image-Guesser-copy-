@page "/a"
@using Microsoft.AspNetCore.SignalR.Client
@using Image_Guesser.Hubs;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div
    <div class="form-group">
        <label>
            User:
            <input @bind="userInput" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />    
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    <div class="form-group">
        <label>
            Group:
            <input @bind="groupInput" size="50" />
        </label>
    </div>
    <button @onclick="AddToGroup" disabled="@(!IsConnected)">AddToGroup</button>
    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div?
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string groupInput;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        }

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages = ChatHub.getUsernameList(groupInput);
            StateHasChanged();
        });
        await hubConnection.StartAsync();



    }
    async Task AddToGroup() =>
        await hubConnection.SendAsync("AddToGroup", groupInput);

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection?.DisposeAsync();

    }
}